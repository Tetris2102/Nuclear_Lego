
/private/var/folders/hx/lv902w311c5bjkf2jyn__4xc0000gn/T/arduino/sketches/D1AFD0F9DFAFAD7646278B4BAD54E11E/cube_attiny85.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	4d c1       	rjmp	.+666    	; 0x2a6 <__vector_5>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	45 c2       	rjmp	.+1162   	; 0x4a6 <__vector_13>
  1c:	8e c1       	rjmp	.+796    	; 0x33a <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
  24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
  2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
  30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
  36:	01 03 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  48:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  4a:	a0 e6       	ldi	r26, 0x60	; 96
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  4c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  4e:	e0 ec       	ldi	r30, 0xC0	; 192
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  50:	f9 e0       	ldi	r31, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  54:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  56:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  58:	a4 36       	cpi	r26, 0x64	; 100
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  5a:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  5e:	20 e0       	ldi	r18, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  60:	a4 e6       	ldi	r26, 0x64	; 100
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  62:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  68:	a7 3c       	cpi	r26, 0xC7	; 199
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  6a:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
  6e:	38 d2       	rcall	.+1136   	; 0x4e0 <main>
  70:	a5 c4       	rjmp	.+2378   	; 0x9bc <_exit>

00000072 <__bad_interrupt>:
__vector_1():
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <analogRead.constprop.7>:
analogRead.constprop.7():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	87 b9       	out	0x07, r24	; 7
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	87 b9       	out	0x07, r24	; 7
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
  7c:	36 9a       	sbi	0x06, 6	; 6
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
  7e:	36 99       	sbic	0x06, 6	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <analogRead.constprop.7+0xa>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:83

  uint8_t low = ADCL;
  82:	84 b1       	in	r24, 0x04	; 4
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:84
  uint8_t high = ADCH;
  84:	95 b1       	in	r25, 0x05	; 5
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:89
  return (high << 8) | low;
  #else
  return LOW;
  #endif
}
  86:	08 95       	ret

00000088 <usiTwiReceiveByte>:
usiTwiReceiveByte():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:205
    txCount++;
}

uint8_t usiTwiReceiveByte(void) {
    uint8_t rtn_byte;
    while (!rxCount);
  88:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
  8c:	88 23       	and	r24, r24
  8e:	e1 f3       	breq	.-8      	; 0x88 <usiTwiReceiveByte>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:206
    rtn_byte = rxBuf [rxTail];
  90:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <rxTail>
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	e9 59       	subi	r30, 0x99	; 153
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	80 81       	ld	r24, Z
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:207
    rxTail = (rxTail + 1) & TWI_RX_BUFFER_MASK;
  9c:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <rxTail>
  a0:	9f 5f       	subi	r25, 0xFF	; 255
  a2:	9f 71       	andi	r25, 0x1F	; 31
  a4:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <rxTail>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:208
    rxCount--;
  a8:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <rxCount>
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <rxCount>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:210
    return rtn_byte;
}
  b2:	08 95       	ret

000000b4 <usiTwiTransmitByte>:
usiTwiTransmitByte():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:197
    return txCount;
}

void usiTwiTransmitByte(uint8_t data) {
    uint8_t tmphead;
    while (txCount == TWI_TX_BUFFER_SIZE);
  b4:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <txCount>
  b8:	90 32       	cpi	r25, 0x20	; 32
  ba:	e1 f3       	breq	.-8      	; 0xb4 <usiTwiTransmitByte>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:198
    txBuf[txHead] = data;
  bc:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <txHead>
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	e9 57       	subi	r30, 0x79	; 121
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 83       	st	Z, r24
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:199
    txHead = (txHead + 1) & TWI_TX_BUFFER_MASK;
  c8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <txHead>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	8f 71       	andi	r24, 0x1F	; 31
  d0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <txHead>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:200
    txCount++;
  d4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <txCount>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <txCount>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:201
}
  de:	08 95       	ret

000000e0 <reportOnRequest()>:
_Z15reportOnRequestv():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:50
void USI_TWI_S::begin(uint8_t slaveAddr) {                  // initialize I2C lib
    usiTwiSlaveInit(slaveAddr);
}

void USI_TWI_S::write(uint8_t data) {                       // send it back to master
    usiTwiTransmitByte(data);
  e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <voxelType>
  e4:	e7 df       	rcall	.-50     	; 0xb4 <usiTwiTransmitByte>
write():
  e6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <materialType>
  ea:	e4 df       	rcall	.-56     	; 0xb4 <usiTwiTransmitByte>
  ec:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <activity>
  f0:	e1 df       	rcall	.-62     	; 0xb4 <usiTwiTransmitByte>
  f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  f6:	de df       	rcall	.-68     	; 0xb4 <usiTwiTransmitByte>
  f8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <level>
  fc:	db df       	rcall	.-74     	; 0xb4 <usiTwiTransmitByte>
  fe:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <hasCubeAbove>
 102:	d8 cf       	rjmp	.-80     	; 0xb4 <usiTwiTransmitByte>

00000104 <digitalWrite>:
digitalWrite():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	ea 5c       	subi	r30, 0xCA	; 202
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	34 91       	lpm	r19, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
 10e:	fc 01       	movw	r30, r24
 110:	e0 5d       	subi	r30, 0xD0	; 208
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	24 91       	lpm	r18, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
 116:	fc 01       	movw	r30, r24
 118:	e6 5d       	subi	r30, 0xD6	; 214
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	e4 91       	lpm	r30, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 11e:	ee 23       	and	r30, r30
 120:	b9 f0       	breq	.+46     	; 0x150 <digitalWrite+0x4c>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 122:	33 23       	and	r19, r19
 124:	29 f0       	breq	.+10     	; 0x130 <digitalWrite+0x2c>
turnOffPWM():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
    if( timer == TIMER0A){
 126:	31 30       	cpi	r19, 0x01	; 1
 128:	a1 f4       	brne	.+40     	; 0x152 <digitalWrite+0x4e>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:68
      cbi(TCCR0A, COM0A1);
 12a:	8a b5       	in	r24, 0x2a	; 42
 12c:	8f 77       	andi	r24, 0x7F	; 127
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:74
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
      cbi(TCCR0A, COM0B1);
 12e:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ec 5d       	subi	r30, 0xDC	; 220
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	a5 91       	lpm	r26, Z+
 13c:	b4 91       	lpm	r27, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
 13e:	8f b7       	in	r24, 0x3f	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
 140:	61 11       	cpse	r22, r1
 142:	18 c0       	rjmp	.+48     	; 0x174 <digitalWrite+0x70>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
 144:	f8 94       	cli
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:155
    *out &= ~bit;
 146:	ec 91       	ld	r30, X
 148:	20 95       	com	r18
 14a:	2e 23       	and	r18, r30
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
 14c:	2c 93       	st	X, r18
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:161
    SREG = oldSREG;
 14e:	8f bf       	out	0x3f, r24	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:163
  }
}
 150:	08 95       	ret
turnOffPWM():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:73
      cbi(TCCR0A, COM0A1);
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
 152:	32 30       	cpi	r19, 0x02	; 2
 154:	19 f4       	brne	.+6      	; 0x15c <digitalWrite+0x58>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:74
      cbi(TCCR0A, COM0B1);
 156:	8a b5       	in	r24, 0x2a	; 42
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	e9 cf       	rjmp	.-46     	; 0x12e <digitalWrite+0x2a>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:106
      //cbi(TCCR1C,COM1D0);
    } else
  #else
    // Timer1 for non-x61/x7
    #if defined(TCCR1) && defined(COM1A1) // x5
      if(timer == TIMER1A){
 15c:	33 30       	cpi	r19, 0x03	; 3
 15e:	21 f4       	brne	.+8      	; 0x168 <digitalWrite+0x64>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:107
        TCCR1 &= ~(1<<COM1A1);
 160:	80 b7       	in	r24, 0x30	; 48
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	80 bf       	out	0x30, r24	; 48
 166:	e4 cf       	rjmp	.-56     	; 0x130 <digitalWrite+0x2c>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:112
        //cbi(TCCR1, COM1A0);
      } else
    #endif
    #if defined(TCCR1) && defined(COM1B1) // x5
      if( timer == TIMER1B){
 168:	34 30       	cpi	r19, 0x04	; 4
 16a:	11 f7       	brne	.-60     	; 0x130 <digitalWrite+0x2c>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:113
        GTCCR &= ~(1<<COM1B1);
 16c:	8c b5       	in	r24, 0x2c	; 44
 16e:	8f 7d       	andi	r24, 0xDF	; 223
 170:	8c bd       	out	0x2c, r24	; 44
 172:	de cf       	rjmp	.-68     	; 0x130 <digitalWrite+0x2c>
digitalWrite():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
 174:	f8 94       	cli
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:160
    *out |= bit;
 176:	ec 91       	ld	r30, X
 178:	2e 2b       	or	r18, r30
 17a:	e8 cf       	rjmp	.-48     	; 0x14c <digitalWrite+0x48>

0000017c <pinMode>:
pinMode():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	e0 5d       	subi	r30, 0xD0	; 208
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	24 91       	lpm	r18, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
 18a:	86 5d       	subi	r24, 0xD6	; 214
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	fc 01       	movw	r30, r24
 190:	84 91       	lpm	r24, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 192:	88 23       	and	r24, r24
 194:	d1 f0       	breq	.+52     	; 0x1ca <pinMode+0x4e>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	fc 01       	movw	r30, r24
 19e:	e2 5e       	subi	r30, 0xE2	; 226
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	a5 91       	lpm	r26, Z+
 1a4:	b4 91       	lpm	r27, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
 1a6:	fc 01       	movw	r30, r24
 1a8:	ec 5d       	subi	r30, 0xDC	; 220
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	c5 91       	lpm	r28, Z+
 1ae:	d4 91       	lpm	r29, Z
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:44

  if (mode == INPUT) {
 1b0:	61 11       	cpse	r22, r1
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <pinMode+0x54>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
 1b4:	9f b7       	in	r25, 0x3f	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:46
                cli();
 1b6:	f8 94       	cli
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:47
    *reg &= ~bit;
 1b8:	8c 91       	ld	r24, X
 1ba:	e2 2f       	mov	r30, r18
 1bc:	e0 95       	com	r30
 1be:	8e 23       	and	r24, r30
 1c0:	8c 93       	st	X, r24
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:48
    *out &= ~bit;
 1c2:	28 81       	ld	r18, Y
 1c4:	e2 23       	and	r30, r18
 1c6:	e8 83       	st	Y, r30
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:49
    SREG = oldSREG;
 1c8:	9f bf       	out	0x3f, r25	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 1d0:	8f b7       	in	r24, 0x3f	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:58
                cli();
 1d2:	f8 94       	cli
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:59
    *reg |= bit;
 1d4:	ec 91       	ld	r30, X
 1d6:	e2 2b       	or	r30, r18
 1d8:	ec 93       	st	X, r30
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
 1da:	8f bf       	out	0x3f, r24	; 63
 1dc:	f6 cf       	rjmp	.-20     	; 0x1ca <pinMode+0x4e>

000001de <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	f6 2e       	mov	r15, r22
operator*():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 1ec:	08 81       	ld	r16, Y
 1ee:	19 81       	ldd	r17, Y+1	; 0x01
 1f0:	c8 01       	movw	r24, r16
 1f2:	63 d3       	rcall	.+1734   	; 0x8ba <eeprom_read_byte>
_ZN5EERef6updateEh():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 1f4:	f8 16       	cp	r15, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
 1f8:	6f 2d       	mov	r22, r15
 1fa:	c8 01       	movw	r24, r16
 1fc:	66 d3       	rcall	.+1740   	; 0x8ca <eeprom_write_byte>
_ZN5EERef6updateEh():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 1fe:	ce 01       	movw	r24, r28
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	08 95       	ret

0000020c <receiveAndStore(unsigned char)>:
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:85
    TinyWireS.write(static_cast<uint8_t>(sampleType));
    TinyWireS.write(level);
    TinyWireS.write(hasCubeAbove);
}

void receiveAndStore(uint8_t numBytes) {
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <receiveAndStore(unsigned char)+0xa>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:86
    if(numBytes == 6) {
 21a:	86 30       	cpi	r24, 0x06	; 6
 21c:	e9 f5       	brne	.+122    	; 0x298 <__stack+0x39>
read():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:58
uint8_t USI_TWI_S::available() {                            // the bytes available that haven't been read yet
    return usiTwiAmountDataInReceiveBuffer();
}
 
uint8_t USI_TWI_S::read() {                                 // returns the bytes received one at a time
    return usiTwiReceiveByte();
 21e:	34 df       	rcall	.-408    	; 0x88 <usiTwiReceiveByte>
 220:	08 2f       	mov	r16, r24
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:87
        voxelType = static_cast<VoxelType>(TinyWireS.read());
 222:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voxelType>
read():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:58
 226:	30 df       	rcall	.-416    	; 0x88 <usiTwiReceiveByte>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:88
        materialType = static_cast<MaterialType>(TinyWireS.read());
 228:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <materialType>
read():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:58
 22c:	2d df       	rcall	.-422    	; 0x88 <usiTwiReceiveByte>
 22e:	18 2f       	mov	r17, r24
 230:	2b df       	rcall	.-426    	; 0x88 <usiTwiReceiveByte>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:89
        activity = TinyWireS.read() | (TinyWireS.read() << 8);
 232:	98 2f       	mov	r25, r24
 234:	81 2f       	mov	r24, r17
 236:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <activity+0x1>
 23a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <activity>
read():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:58
 23e:	24 df       	rcall	.-440    	; 0x88 <usiTwiReceiveByte>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:90
        sampleType = static_cast<IsotopeSampleType>(TinyWireS.read());
 240:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
_ZN5EERefC2Ei():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	19 82       	std	Y+1, r1	; 0x01
_ZN11EEPROMClass6updateEih.isra.0():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 248:	60 2f       	mov	r22, r16
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	c7 df       	rcall	.-114    	; 0x1de <EERef::update(unsigned char)>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:93

        EEPROM.update(0, voxelType);
        EEPROM.update(1, materialType);
 250:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <materialType>
_ZN5EERefC2Ei():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.0():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 25c:	ce 01       	movw	r24, r28
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	be df       	rcall	.-132    	; 0x1de <EERef::update(unsigned char)>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:94
        EEPROM.update(2, activity & 0xFF);
 262:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <activity>
_ZN5EERefC2Ei():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.0():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	b5 df       	rcall	.-150    	; 0x1de <EERef::update(unsigned char)>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:95
        EEPROM.update(3, activity >> 8);
 274:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <activity+0x1>
_ZN5EERefC2Ei():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.0():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	ac df       	rcall	.-168    	; 0x1de <EERef::update(unsigned char)>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:96
        EEPROM.update(4, sampleType);
 286:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
_ZN5EERefC2Ei():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9a 83       	std	Y+2, r25	; 0x02
 290:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih.isra.0():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	a3 df       	rcall	.-186    	; 0x1de <EERef::update(unsigned char)>
_Z15receiveAndStoreh():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:98
    }
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <__vector_5>:
__vector_5():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
 2bc:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <millis_timer_millis>
 2c0:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <millis_timer_millis+0x1>
 2c4:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <millis_timer_millis+0x2>
 2c8:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <millis_timer_millis+0x3>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
 2cc:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <millis_timer_fract>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
 2d0:	26 e0       	ldi	r18, 0x06	; 6
 2d2:	23 0f       	add	r18, r19
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:321

    if (f >= FRACT_MAX)
 2d4:	2d 37       	cpi	r18, 0x7D	; 125
 2d6:	68 f1       	brcs	.+90     	; 0x332 <__vector_5+0x8c>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:323
    {
      f -= FRACT_MAX;
 2d8:	29 e8       	ldi	r18, 0x89	; 137
 2da:	23 0f       	add	r18, r19
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:324
      m += MILLIS_INC + 1;
 2dc:	03 96       	adiw	r24, 0x03	; 3
 2de:	a1 1d       	adc	r26, r1
 2e0:	b1 1d       	adc	r27, r1
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
 2e2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <millis_timer_fract>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:332
    millis_timer_millis = m;
 2e6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <millis_timer_millis>
 2ea:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <millis_timer_millis+0x1>
 2ee:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <millis_timer_millis+0x2>
 2f2:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <millis_timer_millis+0x3>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
 2f6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <millis_timer_overflow_count>
 2fa:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <millis_timer_overflow_count+0x1>
 2fe:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <millis_timer_overflow_count+0x2>
 302:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <millis_timer_overflow_count+0x3>
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <millis_timer_overflow_count>
 310:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <millis_timer_overflow_count+0x1>
 314:	a0 93 c0 00 	sts	0x00C0, r26	; 0x8000c0 <millis_timer_overflow_count+0x2>
 318:	b0 93 c1 00 	sts	0x00C1, r27	; 0x8000c1 <millis_timer_overflow_count+0x3>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:336
#endif
  }
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
 332:	02 96       	adiw	r24, 0x02	; 2
 334:	a1 1d       	adc	r26, r1
 336:	b1 1d       	adc	r27, r1
 338:	d4 cf       	rjmp	.-88     	; 0x2e2 <__vector_5+0x3c>

0000033a <__vector_14>:
__vector_14():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:231
    }
    USISR = (1 << USI_START_COND_INT)   | (1 << USIOIF) |
            (1 << USIPF) | (1 << USIDC) | (0x0 << USICNT0);
}

ISR(USI_OVERFLOW_VECTOR) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:232
    switch (overflowState) {
 35c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <overflowState>
 360:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <overflowState+0x1>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	91 05       	cpc	r25, r1
 368:	09 f4       	brne	.+2      	; 0x36c <__vector_14+0x32>
 36a:	8b c0       	rjmp	.+278    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 36c:	b0 f4       	brcc	.+44     	; 0x39a <__vector_14+0x60>
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	a9 f1       	breq	.+106    	; 0x3dc <__vector_14+0xa2>
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	09 f4       	brne	.+2      	; 0x378 <__vector_14+0x3e>
 376:	60 c0       	rjmp	.+192    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:279
            overflowState = USI_SLAVE_REQUEST_DATA;
            SET_USI_TO_SEND_ACK();
            break;
    }

}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:232
    USISR = (1 << USI_START_COND_INT)   | (1 << USIOIF) |
            (1 << USIPF) | (1 << USIDC) | (0x0 << USICNT0);
}

ISR(USI_OVERFLOW_VECTOR) {
    switch (overflowState) {
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	91 05       	cpc	r25, r1
 39e:	09 f4       	brne	.+2      	; 0x3a2 <__vector_14+0x68>
 3a0:	7a c0       	rjmp	.+244    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 3a2:	08 f4       	brcc	.+2      	; 0x3a6 <__vector_14+0x6c>
 3a4:	43 c0       	rjmp	.+134    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3a6:	05 97       	sbiw	r24, 0x05	; 5
 3a8:	39 f7       	brne	.-50     	; 0x378 <__vector_14+0x3e>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:269
        case (USI_SLAVE_REQUEST_DATA):
            overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
            SET_USI_TO_READ_DATA();
            break;
        case (USI_SLAVE_GET_DATA_AND_SEND_ACK):
            if (rxCount < TWI_RX_BUFFER_SIZE) {
 3aa:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
 3ae:	80 32       	cpi	r24, 0x20	; 32
 3b0:	90 f4       	brcc	.+36     	; 0x3d6 <__vector_14+0x9c>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:270
                    rxBuf[rxHead] = USIDR;
 3b2:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <rxHead>
 3b6:	8f b1       	in	r24, 0x0f	; 15
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	e9 59       	subi	r30, 0x99	; 153
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	80 83       	st	Z, r24
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:271
                    rxHead = (rxHead + 1) & TWI_RX_BUFFER_MASK;
 3c0:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <rxHead>
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	8f 71       	andi	r24, 0x1F	; 31
 3c8:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <rxHead>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:272
                    rxCount++;
 3cc:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <rxCount>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:274
            }
            overflowState = USI_SLAVE_REQUEST_DATA;
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	21 c0       	rjmp	.+66     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:234
}

ISR(USI_OVERFLOW_VECTOR) {
    switch (overflowState) {
        case (USI_SLAVE_CHECK_ADDRESS):
            if ((USIDR == 0) || ((USIDR >> 1) == slaveAddress)) {
 3dc:	8f b1       	in	r24, 0x0f	; 15
 3de:	88 23       	and	r24, r24
 3e0:	31 f0       	breq	.+12     	; 0x3ee <__vector_14+0xb4>
 3e2:	8f b1       	in	r24, 0x0f	; 15
 3e4:	86 95       	lsr	r24
 3e6:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <slaveAddress>
 3ea:	89 13       	cpse	r24, r25
 3ec:	22 c0       	rjmp	.+68     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:235
                if (USIDR & 0x01) {
 3ee:	78 9b       	sbis	0x0f, 0	; 15
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <__vector_14+0x9c>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:236
                    USI_REQUEST_CALLBACK();
 3f2:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <usi_onReceiverPtr>
 3f6:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <usi_onReceiverPtr+0x1>
 3fa:	30 97       	sbiw	r30, 0x00	; 0
 3fc:	39 f0       	breq	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
usiTwiAmountDataInReceiveBuffer():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:213
    rxCount--;
    return rtn_byte;
}

uint8_t usiTwiAmountDataInReceiveBuffer(void) {
    return rxCount;
 3fe:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
__vector_14():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:236
ISR(USI_OVERFLOW_VECTOR) {
    switch (overflowState) {
        case (USI_SLAVE_CHECK_ADDRESS):
            if ((USIDR == 0) || ((USIDR >> 1) == slaveAddress)) {
                if (USIDR & 0x01) {
                    USI_REQUEST_CALLBACK();
 402:	88 23       	and	r24, r24
 404:	19 f0       	breq	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
usiTwiAmountDataInReceiveBuffer():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:213
    rxCount--;
    return rtn_byte;
}

uint8_t usiTwiAmountDataInReceiveBuffer(void) {
    return rxCount;
 406:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
__vector_14():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:236
ISR(USI_OVERFLOW_VECTOR) {
    switch (overflowState) {
        case (USI_SLAVE_CHECK_ADDRESS):
            if ((USIDR == 0) || ((USIDR >> 1) == slaveAddress)) {
                if (USIDR & 0x01) {
                    USI_REQUEST_CALLBACK();
 40a:	09 95       	icall
 40c:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <usi_onRequestPtr>
 410:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <usi_onRequestPtr+0x1>
 414:	30 97       	sbiw	r30, 0x00	; 0
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	09 95       	icall
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:237
                    overflowState = USI_SLAVE_SEND_DATA;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:274
            if (rxCount < TWI_RX_BUFFER_SIZE) {
                    rxBuf[rxHead] = USIDR;
                    rxHead = (rxHead + 1) & TWI_RX_BUFFER_MASK;
                    rxCount++;
            }
            overflowState = USI_SLAVE_REQUEST_DATA;
 41e:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <overflowState+0x1>
 422:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <overflowState>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:275
            SET_USI_TO_SEND_ACK();
 426:	1f b8       	out	0x0f, r1	; 15
 428:	b8 9a       	sbi	0x17, 0	; 23
 42a:	33 c0       	rjmp	.+102    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:243
                } else overflowState = USI_SLAVE_REQUEST_DATA;
                SET_USI_TO_SEND_ACK();
            } else SET_USI_TO_TWI_START_CONDITION_MODE();
            break;
        case (USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA):
            if (USIDR) {
 42c:	8f b1       	in	r24, 0x0f	; 15
 42e:	88 23       	and	r24, r24
 430:	19 f0       	breq	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:254
                USIDR = txBuf[txTail];
                txTail = (txTail + 1) & TWI_TX_BUFFER_MASK;
                txCount--;
            } else {
                SET_USI_TO_READ_ACK();
                SET_USI_TO_TWI_START_CONDITION_MODE();
 432:	88 ea       	ldi	r24, 0xA8	; 168
 434:	8d b9       	out	0x0d, r24	; 13
 436:	1d c0       	rjmp	.+58     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:248
            if (USIDR) {
                SET_USI_TO_TWI_START_CONDITION_MODE();
                return;
            }
        case (USI_SLAVE_SEND_DATA):
            if (txCount) {
 438:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <txCount>
 43c:	88 23       	and	r24, r24
 43e:	e1 f0       	breq	.+56     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:249
                USIDR = txBuf[txTail];
 440:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <txTail>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e9 57       	subi	r30, 0x79	; 121
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	80 81       	ld	r24, Z
 44c:	8f b9       	out	0x0f, r24	; 15
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:250
                txTail = (txTail + 1) & TWI_TX_BUFFER_MASK;
 44e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <txTail>
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	8f 71       	andi	r24, 0x1F	; 31
 456:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <txTail>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:251
                txCount--;
 45a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <txCount>
 45e:	81 50       	subi	r24, 0x01	; 1
 460:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <txCount>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:257
            } else {
                SET_USI_TO_READ_ACK();
                SET_USI_TO_TWI_START_CONDITION_MODE();
                return;
            }
            overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <overflowState+0x1>
 46c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <overflowState>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:258
            SET_USI_TO_SEND_DATA();
 470:	b8 9a       	sbi	0x17, 0	; 23
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:266
            overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
            SET_USI_TO_READ_ACK();
            break;
        case (USI_SLAVE_REQUEST_DATA):
            overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
            SET_USI_TO_READ_DATA();
 472:	80 e7       	ldi	r24, 0x70	; 112
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:275
                    rxBuf[rxHead] = USIDR;
                    rxHead = (rxHead + 1) & TWI_RX_BUFFER_MASK;
                    rxCount++;
            }
            overflowState = USI_SLAVE_REQUEST_DATA;
            SET_USI_TO_SEND_ACK();
 474:	8e b9       	out	0x0e, r24	; 14
 476:	80 cf       	rjmp	.-256    	; 0x378 <__vector_14+0x3e>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:253
            if (txCount) {
                USIDR = txBuf[txTail];
                txTail = (txTail + 1) & TWI_TX_BUFFER_MASK;
                txCount--;
            } else {
                SET_USI_TO_READ_ACK();
 478:	b8 98       	cbi	0x17, 0	; 23
 47a:	1f b8       	out	0x0f, r1	; 15
 47c:	8e e7       	ldi	r24, 0x7E	; 126
 47e:	8e b9       	out	0x0e, r24	; 14
 480:	d8 cf       	rjmp	.-80     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:261
            }
            overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
            SET_USI_TO_SEND_DATA();
            break;
        case (USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA):
            overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <overflowState+0x1>
 48a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <overflowState>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:262
            SET_USI_TO_READ_ACK();
 48e:	b8 98       	cbi	0x17, 0	; 23
 490:	1f b8       	out	0x0f, r1	; 15
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:275
                    rxBuf[rxHead] = USIDR;
                    rxHead = (rxHead + 1) & TWI_RX_BUFFER_MASK;
                    rxCount++;
            }
            overflowState = USI_SLAVE_REQUEST_DATA;
            SET_USI_TO_SEND_ACK();
 492:	8e e7       	ldi	r24, 0x7E	; 126
 494:	ef cf       	rjmp	.-34     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:265
        case (USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA):
            overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
            SET_USI_TO_READ_ACK();
            break;
        case (USI_SLAVE_REQUEST_DATA):
            overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 496:	85 e0       	ldi	r24, 0x05	; 5
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <overflowState+0x1>
 49e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <overflowState>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:266
            SET_USI_TO_READ_DATA();
 4a2:	b8 98       	cbi	0x17, 0	; 23
 4a4:	e6 cf       	rjmp	.-52     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>

000004a6 <__vector_13>:
__vector_13():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:216

uint8_t usiTwiAmountDataInReceiveBuffer(void) {
    return rxCount;
}
 
ISR(USI_START_VECTOR) {
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:217
    overflowState = USI_SLAVE_CHECK_ADDRESS;
 4b2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <overflowState+0x1>
 4b6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <overflowState>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:218
    DDR_USI &= ~(1 << PORT_USI_SDA);
 4ba:	b8 98       	cbi	0x17, 0	; 23
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:219
    while ((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
 4bc:	b2 9b       	sbis	0x16, 2	; 22
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__vector_13+0x1e>
 4c0:	b0 9b       	sbis	0x16, 0	; 22
 4c2:	fc cf       	rjmp	.-8      	; 0x4bc <__vector_13+0x16>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:220
    if (!(PIN_USI & (1 << PIN_USI_SDA))) {
 4c4:	b0 99       	sbic	0x16, 0	; 22
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__vector_13+0x36>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:221
        USICR = (1 << USISIE) | (1 << USIOIE) | (1 << USIWM1) | (1 << USIWM0) |
 4c8:	88 ef       	ldi	r24, 0xF8	; 248
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:224
                (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
    } else {
        USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1 ) | (0 << USIWM0) |
 4ca:	8d b9       	out	0x0d, r24	; 13
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:227
                (1 << USICS1) | (0 << USICS0) | (0 << USICLK ) | (0 << USITC);
    }
    USISR = (1 << USI_START_COND_INT)   | (1 << USIOIF) |
 4cc:	80 ef       	ldi	r24, 0xF0	; 240
 4ce:	8e b9       	out	0x0e, r24	; 14
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:229
            (1 << USIPF) | (1 << USIDC) | (0x0 << USICNT0);
}
 4d0:	8f 91       	pop	r24
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:224
    while ((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
    if (!(PIN_USI & (1 << PIN_USI_SDA))) {
        USICR = (1 << USISIE) | (1 << USIOIE) | (1 << USIWM1) | (1 << USIWM0) |
                (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
    } else {
        USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1 ) | (0 << USIWM0) |
 4dc:	88 ea       	ldi	r24, 0xA8	; 168
 4de:	f5 cf       	rjmp	.-22     	; 0x4ca <__vector_13+0x24>

000004e0 <main>:
main():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <main+0x6>
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x8>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <main+0xa>
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
init():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	8a bd       	out	0x2a, r24	; 42
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
 4f2:	83 bf       	out	0x33, r24	; 51
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
 4f4:	78 94       	sei
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
 4f6:	89 b7       	in	r24, 0x39	; 57
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
 4fc:	80 e4       	ldi	r24, 0x40	; 64
 4fe:	8c bd       	out	0x2c, r24	; 44
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	8d bd       	out	0x2d, r24	; 45
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
 504:	87 ec       	ldi	r24, 0xC7	; 199
 506:	80 bf       	out	0x30, r24	; 48
init():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 508:	86 e8       	ldi	r24, 0x86	; 134
 50a:	86 b9       	out	0x06, r24	; 6
setup():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:31
void receiveAndStore(uint8_t numBytes);
uint16_t msBetweenDecays(uint16_t activity);
void beepBuzzer();

void setup() {
    pinMode(PIN_PRES_IN, INPUT);
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	35 de       	rcall	.-918    	; 0x17c <pinMode>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:32
    pinMode(PIN_BUZZ, OUTPUT);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	32 de       	rcall	.-924    	; 0x17c <pinMode>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:33
    pinMode(PIN_LVL_OUT, OUTPUT);
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	2f de       	rcall	.-930    	; 0x17c <pinMode>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:34
    pinMode(PIN_LVL_IN, INPUT);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	2c de       	rcall	.-936    	; 0x17c <pinMode>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:36

    randomSeed(analogRead(PIN_LVL_IN));
 524:	a7 dd       	rcall	.-1202   	; 0x74 <analogRead.constprop.7>
randomSeed():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:32
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	21 f0       	breq	.+8      	; 0x532 <main+0x52>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:33
    srandom(seed);
 52a:	bc 01       	movw	r22, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	bb d1       	rcall	.+886    	; 0x8a8 <srandom>
updateParams():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:63
        last_beep = now;
    }
}

void updateParams() {
    uint16_t lvl_in = analogRead(PIN_LVL_IN);
 532:	a0 dd       	rcall	.-1216   	; 0x74 <analogRead.constprop.7>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:64
    level = map(lvl_in, 0, 1023, 0, MAX_HEIGHT);
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	a0 e0       	ldi	r26, 0x00	; 0
map():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:56
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	33 e0       	ldi	r19, 0x03	; 3
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	e5 d1       	rcall	.+970    	; 0x918 <__divmodsi4>
updateParams():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:64
 54e:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <level>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:66

    if(level != MAX_HEIGHT) {
 552:	22 30       	cpi	r18, 0x02	; 2
 554:	f9 f0       	breq	.+62     	; 0x594 <main+0xb4>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:67
        uint8_t lvl_out = map(level + 1, 0, MAX_HEIGHT, 0, 255);
 556:	62 2f       	mov	r22, r18
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	07 2e       	mov	r0, r23
 560:	00 0c       	add	r0, r0
 562:	88 0b       	sbc	r24, r24
 564:	99 0b       	sbc	r25, r25
map():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:56
 566:	2f ef       	ldi	r18, 0xFF	; 255
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	bb d1       	rcall	.+886    	; 0x8e6 <__mulsi3>
 570:	6b 01       	movw	r12, r22
 572:	7c 01       	movw	r14, r24
 574:	f5 94       	asr	r15
 576:	e7 94       	ror	r14
 578:	d7 94       	ror	r13
 57a:	c7 94       	ror	r12
updateParams():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:67
 57c:	c9 82       	std	Y+1, r12	; 0x01
analogWrite():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	fc dd       	rcall	.-1032   	; 0x17c <pinMode>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:103

  if (val <= 0)
 584:	29 81       	ldd	r18, Y+1	; 0x01
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:105
  {
    digitalWrite(pin, LOW);
 586:	60 e0       	ldi	r22, 0x00	; 0
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:103
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);

  if (val <= 0)
 588:	22 23       	and	r18, r18
 58a:	29 f0       	breq	.+10     	; 0x596 <main+0xb6>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:107
  {
    digitalWrite(pin, LOW);
  }
  else if (val >= 255)
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	8f 3f       	cpi	r24, 0xFF	; 255
 590:	09 f0       	breq	.+2      	; 0x594 <main+0xb4>
 592:	e7 c0       	rjmp	.+462    	; 0x762 <main+0x282>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:109
  {
    digitalWrite(pin, HIGH);
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	b5 dd       	rcall	.-1174   	; 0x104 <digitalWrite>
digitalRead():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_digital.c:180
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
 59a:	86 b3       	in	r24, 0x16	; 22
 59c:	86 95       	lsr	r24
 59e:	81 70       	andi	r24, 0x01	; 1
updateParams():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:73
        analogWrite(PIN_LVL_OUT, lvl_out);
    } else {
        digitalWrite(PIN_LVL_OUT, HIGH);
    }

    hasCubeAbove = digitalRead(PIN_PRES_IN);
 5a0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <hasCubeAbove>
setup():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:40

    randomSeed(analogRead(PIN_LVL_IN));

    updateParams();

    TinyWireS.begin(level + 8);  // Use level as I2C address beginning from 8
 5a4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <level>
 5a8:	88 5f       	subi	r24, 0xF8	; 248
flushTwiBuffers():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:170
static volatile uint8_t txHead;
static volatile uint8_t txTail;
static volatile uint8_t txCount;

static void flushTwiBuffers(void) {
    rxTail  = 0;
 5aa:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <rxTail>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:171
    rxHead  = 0;
 5ae:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <rxHead>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:172
    rxCount = 0;
 5b2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <rxCount>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:173
    txTail  = 0;
 5b6:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <txTail>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:174
    txHead  = 0;
 5ba:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <txHead>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:175
    txCount = 0;
 5be:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <txCount>
usiTwiSlaveInit():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:180
}

void usiTwiSlaveInit(uint8_t ownAddress) {
    flushTwiBuffers();
    slaveAddress = ownAddress;
 5c2:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <slaveAddress>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:181
    DDR_USI  |=  (1 << PORT_USI_SCL) | (1 << PORT_USI_SDA);
 5c6:	87 b3       	in	r24, 0x17	; 23
 5c8:	85 60       	ori	r24, 0x05	; 5
 5ca:	87 bb       	out	0x17, r24	; 23
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:182
    PORT_USI |=  (1 << PORT_USI_SCL);
 5cc:	c2 9a       	sbi	0x18, 2	; 24
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:183
    PORT_USI |=  (1 << PORT_USI_SDA);
 5ce:	c0 9a       	sbi	0x18, 0	; 24
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:184
    DDR_USI  &= ~(1 << PORT_USI_SDA);
 5d0:	b8 98       	cbi	0x17, 0	; 23
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:185
    USICR     =  (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) |
 5d2:	88 ea       	ldi	r24, 0xA8	; 168
 5d4:	8d b9       	out	0x0d, r24	; 13
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:187
                 (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
    USISR     =  (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
 5d6:	80 ef       	ldi	r24, 0xF0	; 240
 5d8:	8e b9       	out	0x0e, r24	; 14
onRequest():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:66
void USI_TWI_S::onReceive(void (*function)(uint8_t)) {      // sets function called on slave write
    usi_onReceiverPtr = function;
}

void USI_TWI_S::onRequest(void (*function)(void)) {         // sets function called on slave read
    usi_onRequestPtr = function;
 5da:	80 e7       	ldi	r24, 0x70	; 112
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <usi_onRequestPtr+0x1>
 5e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <usi_onRequestPtr>
onReceive():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:62
uint8_t USI_TWI_S::read() {                                 // returns the bytes received one at a time
    return usiTwiReceiveByte();
}

void USI_TWI_S::onReceive(void (*function)(uint8_t)) {      // sets function called on slave write
    usi_onReceiverPtr = function;
 5e6:	86 e0       	ldi	r24, 0x06	; 6
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <usi_onReceiverPtr+0x1>
 5ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <usi_onReceiverPtr>
delayMicroseconds():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:833
    // us is at least 4, divided by 4 gives us 1 (no zero delay bug)
    us >>= 2; // us div 4, = 4 cycles
  #endif

  // busy wait
  __asm__ __volatile__ (
 5f2:	06 ef       	ldi	r16, 0xF6	; 246
 5f4:	10 e0       	ldi	r17, 0x00	; 0
msBetweenDecays():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:113
    uint32_t U = r;
    uint32_t diff = 65535 - U;
    uint32_t ln_approx = diff + (diff * diff) / (2 * 65535) +
      (diff * diff * diff) / (3 * 65535 * 65535);

    uint16_t mean_ms = 1000UL / activity;
 5f6:	38 ee       	ldi	r19, 0xE8	; 232
 5f8:	23 2e       	mov	r2, r19
 5fa:	33 e0       	ldi	r19, 0x03	; 3
 5fc:	33 2e       	mov	r3, r19
TinyWireS_stop_check():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:70
void USI_TWI_S::onRequest(void (*function)(void)) {         // sets function called on slave read
    usi_onRequestPtr = function;
}

void TinyWireS_stop_check() {
    if (!usi_onReceiverPtr) return;                         // no onReceive callback, nothing to do...
 5fe:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <usi_onReceiverPtr>
 602:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <usi_onReceiverPtr+0x1>
 606:	30 97       	sbiw	r30, 0x00	; 0
 608:	31 f0       	breq	.+12     	; 0x616 <main+0x136>
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:71
    if (!(USISR & (1 << USIPF))) return;                    // Stop not detected
 60a:	75 9b       	sbis	0x0e, 5	; 14
 60c:	04 c0       	rjmp	.+8      	; 0x616 <main+0x136>
usiTwiAmountDataInReceiveBuffer():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/utility/USI_TWI_Slave.c:213
    rxCount--;
    return rtn_byte;
}

uint8_t usiTwiAmountDataInReceiveBuffer(void) {
    return rxCount;
 60e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <rxCount>
TinyWireS_stop_check():
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:73
    uint8_t amount = usiTwiAmountDataInReceiveBuffer();
    if (amount == 0) return;                                // no data in buffer
 612:	81 11       	cpse	r24, r1
/Users/tarasosaulenko/Documents/Arduino/libraries/TinyWireS/TinyWireS.cpp:74
    usi_onReceiverPtr(amount);
 614:	09 95       	icall
millis():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
 616:	8f b7       	in	r24, 0x3f	; 63
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
 618:	f8 94       	cli
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:346
    m = millis_timer_millis;
 61a:	40 90 c3 00 	lds	r4, 0x00C3	; 0x8000c3 <millis_timer_millis>
 61e:	50 90 c4 00 	lds	r5, 0x00C4	; 0x8000c4 <millis_timer_millis+0x1>
 622:	60 90 c5 00 	lds	r6, 0x00C5	; 0x8000c5 <millis_timer_millis+0x2>
 626:	70 90 c6 00 	lds	r7, 0x00C6	; 0x8000c6 <millis_timer_millis+0x3>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:347
    SREG = oldSREG;
 62a:	8f bf       	out	0x3f, r24	; 63
loop():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:55
void loop() {
    TinyWireS_stop_check();

    unsigned long now = millis();

    if(now - last_beep > decay_interval_ms) {
 62c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <last_beep>
 630:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <last_beep+0x1>
 634:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <last_beep+0x2>
 638:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <last_beep+0x3>
 63c:	b3 01       	movw	r22, r6
 63e:	a2 01       	movw	r20, r4
 640:	48 1b       	sub	r20, r24
 642:	59 0b       	sbc	r21, r25
 644:	6a 0b       	sbc	r22, r26
 646:	7b 0b       	sbc	r23, r27
 648:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <decay_interval_ms>
 64c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <decay_interval_ms+0x1>
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	a0 e0       	ldi	r26, 0x00	; 0
 654:	84 17       	cp	r24, r20
 656:	95 07       	cpc	r25, r21
 658:	a6 07       	cpc	r26, r22
 65a:	b7 07       	cpc	r27, r23
 65c:	80 f6       	brcc	.-96     	; 0x5fe <main+0x11e>
 65e:	94 e1       	ldi	r25, 0x14	; 20
 660:	99 83       	std	Y+1, r25	; 0x01
beepBuzzer():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:121
    return (uint16_t)result;
}

void beepBuzzer() {
    for(uint8_t i = 0; i<20; i++) {
        digitalWrite(PIN_BUZZ, HIGH);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	4e dd       	rcall	.-1380   	; 0x104 <digitalWrite>
delayMicroseconds():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:833
    // us is at least 4, divided by 4 gives us 1 (no zero delay bug)
    us >>= 2; // us div 4, = 4 cycles
  #endif

  // busy wait
  __asm__ __volatile__ (
 668:	c8 01       	movw	r24, r16
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <main+0x18a>
beepBuzzer():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:123
        delayMicroseconds(125);
        digitalWrite(PIN_BUZZ, LOW);
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	83 e0       	ldi	r24, 0x03	; 3
 672:	48 dd       	rcall	.-1392   	; 0x104 <digitalWrite>
delayMicroseconds():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:833
 674:	c8 01       	movw	r24, r16
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <main+0x196>
 67a:	a9 81       	ldd	r26, Y+1	; 0x01
 67c:	a1 50       	subi	r26, 0x01	; 1
 67e:	a9 83       	std	Y+1, r26	; 0x01
beepBuzzer():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:120

    return (uint16_t)result;
}

void beepBuzzer() {
    for(uint8_t i = 0; i<20; i++) {
 680:	a1 11       	cpse	r26, r1
 682:	ef cf       	rjmp	.-34     	; 0x662 <main+0x182>
loop():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:57

    unsigned long now = millis();

    if(now - last_beep > decay_interval_ms) {
        beepBuzzer();
        decay_interval_ms = msBetweenDecays(activity);
 684:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <activity>
 688:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <activity+0x1>
 68c:	9e 83       	std	Y+6, r25	; 0x06
 68e:	8d 83       	std	Y+5, r24	; 0x05
msBetweenDecays():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:101
        EEPROM.update(4, sampleType);
    }
}

uint16_t msBetweenDecays(uint16_t activity) {
    if(activity > 2000) activity = 2000;
 690:	81 3d       	cpi	r24, 0xD1	; 209
 692:	a7 e0       	ldi	r26, 0x07	; 7
 694:	9a 07       	cpc	r25, r26
 696:	08 f0       	brcs	.+2      	; 0x69a <main+0x1ba>
 698:	69 c0       	rjmp	.+210    	; 0x76c <main+0x28c>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:102
    if(activity == 0) activity = 1;  // Handle background radiation
 69a:	89 2b       	or	r24, r25
 69c:	21 f4       	brne	.+8      	; 0x6a6 <main+0x1c6>
main():
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	9e 83       	std	Y+6, r25	; 0x06
 6a4:	8d 83       	std	Y+5, r24	; 0x05
random():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:42
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
 6a6:	b2 d0       	rcall	.+356    	; 0x80c <random>
 6a8:	2e ef       	ldi	r18, 0xFE	; 254
 6aa:	3f ef       	ldi	r19, 0xFF	; 255
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	33 d1       	rcall	.+614    	; 0x918 <__divmodsi4>
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/WMath.cpp:51
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
 6b2:	6b 01       	movw	r12, r22
 6b4:	7c 01       	movw	r14, r24
 6b6:	bf ef       	ldi	r27, 0xFF	; 255
 6b8:	cb 1a       	sub	r12, r27
 6ba:	db 0a       	sbc	r13, r27
 6bc:	eb 0a       	sbc	r14, r27
 6be:	fb 0a       	sbc	r15, r27
msBetweenDecays():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:109

    // Poisson time scaling with random number generator
    uint16_t r = random(1, 65535);

    uint32_t U = r;
    uint32_t diff = 65535 - U;
 6c0:	c0 94       	com	r12
 6c2:	d0 94       	com	r13
 6c4:	e0 94       	com	r14
 6c6:	f0 94       	com	r15
 6c8:	ee 24       	eor	r14, r14
 6ca:	ff 24       	eor	r15, r15
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:110
    uint32_t ln_approx = diff + (diff * diff) / (2 * 65535) +
 6cc:	a7 01       	movw	r20, r14
 6ce:	96 01       	movw	r18, r12
 6d0:	c7 01       	movw	r24, r14
 6d2:	b6 01       	movw	r22, r12
 6d4:	08 d1       	rcall	.+528    	; 0x8e6 <__mulsi3>
 6d6:	4b 01       	movw	r8, r22
 6d8:	5c 01       	movw	r10, r24
 6da:	2e ef       	ldi	r18, 0xFE	; 254
 6dc:	3f ef       	ldi	r19, 0xFF	; 255
 6de:	41 e0       	ldi	r20, 0x01	; 1
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	36 d1       	rcall	.+620    	; 0x950 <__udivmodsi4>
 6e4:	da 01       	movw	r26, r20
 6e6:	c9 01       	movw	r24, r18
 6e8:	8c 0d       	add	r24, r12
 6ea:	9d 1d       	adc	r25, r13
 6ec:	ae 1d       	adc	r26, r14
 6ee:	bf 1d       	adc	r27, r15
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	9a 83       	std	Y+2, r25	; 0x02
 6f4:	ab 83       	std	Y+3, r26	; 0x03
 6f6:	bc 83       	std	Y+4, r27	; 0x04
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:111
      (diff * diff * diff) / (3 * 65535 * 65535);
 6f8:	a5 01       	movw	r20, r10
 6fa:	94 01       	movw	r18, r8
 6fc:	c7 01       	movw	r24, r14
 6fe:	b6 01       	movw	r22, r12
 700:	f2 d0       	rcall	.+484    	; 0x8e6 <__mulsi3>
 702:	c1 2c       	mov	r12, r1
 704:	d1 2c       	mov	r13, r1
 706:	76 01       	movw	r14, r12
 708:	c3 94       	inc	r12
 70a:	63 30       	cpi	r22, 0x03	; 3
 70c:	71 05       	cpc	r23, r1
 70e:	8a 4f       	sbci	r24, 0xFA	; 250
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	18 f4       	brcc	.+6      	; 0x71a <main+0x23a>
 714:	c1 2c       	mov	r12, r1
 716:	d1 2c       	mov	r13, r1
 718:	76 01       	movw	r14, r12
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:110
    // Poisson time scaling with random number generator
    uint16_t r = random(1, 65535);

    uint32_t U = r;
    uint32_t diff = 65535 - U;
    uint32_t ln_approx = diff + (diff * diff) / (2 * 65535) +
 71a:	89 80       	ldd	r8, Y+1	; 0x01
 71c:	9a 80       	ldd	r9, Y+2	; 0x02
 71e:	ab 80       	ldd	r10, Y+3	; 0x03
 720:	bc 80       	ldd	r11, Y+4	; 0x04
 722:	8c 0c       	add	r8, r12
 724:	9d 1c       	adc	r9, r13
 726:	ae 1c       	adc	r10, r14
 728:	bf 1c       	adc	r11, r15
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:113
      (diff * diff * diff) / (3 * 65535 * 65535);

    uint16_t mean_ms = 1000UL / activity;
 72a:	c1 01       	movw	r24, r2
 72c:	6d 81       	ldd	r22, Y+5	; 0x05
 72e:	7e 81       	ldd	r23, Y+6	; 0x06
 730:	31 d1       	rcall	.+610    	; 0x994 <__udivmodhi4>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:114
    uint32_t result = (mean_ms * ln_approx) / 65535;
 732:	9b 01       	movw	r18, r22
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	c5 01       	movw	r24, r10
 73a:	b4 01       	movw	r22, r8
 73c:	d4 d0       	rcall	.+424    	; 0x8e6 <__mulsi3>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	3f ef       	ldi	r19, 0xFF	; 255
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	04 d1       	rcall	.+520    	; 0x950 <__udivmodsi4>
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:116

    return (uint16_t)result;
 748:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <decay_interval_ms+0x1>
 74c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <decay_interval_ms>
loop():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:58
    unsigned long now = millis();

    if(now - last_beep > decay_interval_ms) {
        beepBuzzer();
        decay_interval_ms = msBetweenDecays(activity);
        last_beep = now;
 750:	40 92 ba 00 	sts	0x00BA, r4	; 0x8000ba <last_beep>
 754:	50 92 bb 00 	sts	0x00BB, r5	; 0x8000bb <last_beep+0x1>
 758:	60 92 bc 00 	sts	0x00BC, r6	; 0x8000bc <last_beep+0x2>
 75c:	70 92 bd 00 	sts	0x00BD, r7	; 0x8000bd <last_beep+0x3>
 760:	4e cf       	rjmp	.-356    	; 0x5fe <main+0x11e>
analogWrite():
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:204
  #endif

  #if defined(TCCR1) && defined(COM1B1)
    if( timer == TIMER1B){
      // connect pwm to pin on timer 1, channel B
      sbi(GTCCR, COM1B1);
 762:	8c b5       	in	r24, 0x2c	; 44
 764:	80 62       	ori	r24, 0x20	; 32
 766:	8c bd       	out	0x2c, r24	; 44
/Users/tarasosaulenko/Library/Arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring_analog.c:206
      //cbi(GTCCR, COM1B0);
      OCR1B = val; // set pwm duty
 768:	cb bc       	out	0x2b, r12	; 43
 76a:	17 cf       	rjmp	.-466    	; 0x59a <main+0xba>
main():
/Users/tarasosaulenko/Documents/GitHub/Nuclear_Lego/Cube_Software/cube_attiny85/cube_attiny85.ino:101
        EEPROM.update(4, sampleType);
    }
}

uint16_t msBetweenDecays(uint16_t activity) {
    if(activity > 2000) activity = 2000;
 76c:	a0 ed       	ldi	r26, 0xD0	; 208
 76e:	b7 e0       	ldi	r27, 0x07	; 7
 770:	be 83       	std	Y+6, r27	; 0x06
 772:	ad 83       	std	Y+5, r26	; 0x05
 774:	98 cf       	rjmp	.-208    	; 0x6a6 <main+0x1c6>

00000776 <random_r>:
random_r():
 776:	8f 92       	push	r8
 778:	9f 92       	push	r9
 77a:	af 92       	push	r10
 77c:	bf 92       	push	r11
 77e:	cf 92       	push	r12
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	ec 01       	movw	r28, r24
 78c:	68 81       	ld	r22, Y
 78e:	79 81       	ldd	r23, Y+1	; 0x01
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	9b 81       	ldd	r25, Y+3	; 0x03
 794:	61 15       	cp	r22, r1
 796:	71 05       	cpc	r23, r1
 798:	81 05       	cpc	r24, r1
 79a:	91 05       	cpc	r25, r1
 79c:	21 f4       	brne	.+8      	; 0x7a6 <random_r+0x30>
 79e:	64 e2       	ldi	r22, 0x24	; 36
 7a0:	79 ed       	ldi	r23, 0xD9	; 217
 7a2:	8b e5       	ldi	r24, 0x5B	; 91
 7a4:	97 e0       	ldi	r25, 0x07	; 7
 7a6:	2d e1       	ldi	r18, 0x1D	; 29
 7a8:	33 ef       	ldi	r19, 0xF3	; 243
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	b4 d0       	rcall	.+360    	; 0x918 <__divmodsi4>
 7b0:	49 01       	movw	r8, r18
 7b2:	5a 01       	movw	r10, r20
 7b4:	27 ea       	ldi	r18, 0xA7	; 167
 7b6:	31 e4       	ldi	r19, 0x41	; 65
 7b8:	40 e0       	ldi	r20, 0x00	; 0
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	94 d0       	rcall	.+296    	; 0x8e6 <__mulsi3>
 7be:	6b 01       	movw	r12, r22
 7c0:	7c 01       	movw	r14, r24
 7c2:	2c ee       	ldi	r18, 0xEC	; 236
 7c4:	34 ef       	ldi	r19, 0xF4	; 244
 7c6:	4f ef       	ldi	r20, 0xFF	; 255
 7c8:	5f ef       	ldi	r21, 0xFF	; 255
 7ca:	c5 01       	movw	r24, r10
 7cc:	b4 01       	movw	r22, r8
 7ce:	8b d0       	rcall	.+278    	; 0x8e6 <__mulsi3>
 7d0:	c6 0e       	add	r12, r22
 7d2:	d7 1e       	adc	r13, r23
 7d4:	e8 1e       	adc	r14, r24
 7d6:	f9 1e       	adc	r15, r25
 7d8:	f7 fe       	sbrs	r15, 7
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <random_r+0x72>
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	c8 1a       	sub	r12, r24
 7e0:	d1 08       	sbc	r13, r1
 7e2:	e1 08       	sbc	r14, r1
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	f8 0a       	sbc	r15, r24
 7e8:	c8 82       	st	Y, r12
 7ea:	d9 82       	std	Y+1, r13	; 0x01
 7ec:	ea 82       	std	Y+2, r14	; 0x02
 7ee:	fb 82       	std	Y+3, r15	; 0x03
 7f0:	c7 01       	movw	r24, r14
 7f2:	b6 01       	movw	r22, r12
 7f4:	9f 77       	andi	r25, 0x7F	; 127
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	ff 90       	pop	r15
 7fc:	ef 90       	pop	r14
 7fe:	df 90       	pop	r13
 800:	cf 90       	pop	r12
 802:	bf 90       	pop	r11
 804:	af 90       	pop	r10
 806:	9f 90       	pop	r9
 808:	8f 90       	pop	r8
 80a:	08 95       	ret

0000080c <random>:
random():
 80c:	8f 92       	push	r8
 80e:	9f 92       	push	r9
 810:	af 92       	push	r10
 812:	bf 92       	push	r11
 814:	cf 92       	push	r12
 816:	df 92       	push	r13
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 820:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 824:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 828:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 82c:	61 15       	cp	r22, r1
 82e:	71 05       	cpc	r23, r1
 830:	81 05       	cpc	r24, r1
 832:	91 05       	cpc	r25, r1
 834:	21 f4       	brne	.+8      	; 0x83e <random+0x32>
 836:	64 e2       	ldi	r22, 0x24	; 36
 838:	79 ed       	ldi	r23, 0xD9	; 217
 83a:	8b e5       	ldi	r24, 0x5B	; 91
 83c:	97 e0       	ldi	r25, 0x07	; 7
 83e:	2d e1       	ldi	r18, 0x1D	; 29
 840:	33 ef       	ldi	r19, 0xF3	; 243
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	68 d0       	rcall	.+208    	; 0x918 <__divmodsi4>
 848:	49 01       	movw	r8, r18
 84a:	5a 01       	movw	r10, r20
 84c:	27 ea       	ldi	r18, 0xA7	; 167
 84e:	31 e4       	ldi	r19, 0x41	; 65
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	48 d0       	rcall	.+144    	; 0x8e6 <__mulsi3>
 856:	6b 01       	movw	r12, r22
 858:	7c 01       	movw	r14, r24
 85a:	2c ee       	ldi	r18, 0xEC	; 236
 85c:	34 ef       	ldi	r19, 0xF4	; 244
 85e:	4f ef       	ldi	r20, 0xFF	; 255
 860:	5f ef       	ldi	r21, 0xFF	; 255
 862:	c5 01       	movw	r24, r10
 864:	b4 01       	movw	r22, r8
 866:	3f d0       	rcall	.+126    	; 0x8e6 <__mulsi3>
 868:	c6 0e       	add	r12, r22
 86a:	d7 1e       	adc	r13, r23
 86c:	e8 1e       	adc	r14, r24
 86e:	f9 1e       	adc	r15, r25
 870:	f7 fe       	sbrs	r15, 7
 872:	06 c0       	rjmp	.+12     	; 0x880 <random+0x74>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	c8 1a       	sub	r12, r24
 878:	d1 08       	sbc	r13, r1
 87a:	e1 08       	sbc	r14, r1
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	f8 0a       	sbc	r15, r24
 880:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
 884:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 888:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 88c:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 890:	c7 01       	movw	r24, r14
 892:	b6 01       	movw	r22, r12
 894:	9f 77       	andi	r25, 0x7F	; 127
 896:	ff 90       	pop	r15
 898:	ef 90       	pop	r14
 89a:	df 90       	pop	r13
 89c:	cf 90       	pop	r12
 89e:	bf 90       	pop	r11
 8a0:	af 90       	pop	r10
 8a2:	9f 90       	pop	r9
 8a4:	8f 90       	pop	r8
 8a6:	08 95       	ret

000008a8 <srandom>:
srandom():
 8a8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 8ac:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 8b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 8b4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 8b8:	08 95       	ret

000008ba <eeprom_read_byte>:
eeprom_read_byte():
 8ba:	e1 99       	sbic	0x1c, 1	; 28
 8bc:	fe cf       	rjmp	.-4      	; 0x8ba <eeprom_read_byte>
 8be:	9f bb       	out	0x1f, r25	; 31
 8c0:	8e bb       	out	0x1e, r24	; 30
 8c2:	e0 9a       	sbi	0x1c, 0	; 28
 8c4:	99 27       	eor	r25, r25
 8c6:	8d b3       	in	r24, 0x1d	; 29
 8c8:	08 95       	ret

000008ca <eeprom_write_byte>:
eeprom_write_byte():
 8ca:	26 2f       	mov	r18, r22

000008cc <eeprom_write_r18>:
 8cc:	e1 99       	sbic	0x1c, 1	; 28
 8ce:	fe cf       	rjmp	.-4      	; 0x8cc <eeprom_write_r18>
 8d0:	1c ba       	out	0x1c, r1	; 28
 8d2:	9f bb       	out	0x1f, r25	; 31
 8d4:	8e bb       	out	0x1e, r24	; 30
 8d6:	2d bb       	out	0x1d, r18	; 29
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	e2 9a       	sbi	0x1c, 2	; 28
 8de:	e1 9a       	sbi	0x1c, 1	; 28
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	08 95       	ret

000008e6 <__mulsi3>:
__mulsi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:445
 8e6:	ee 27       	eor	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:446
 8e8:	ff 27       	eor	r31, r31

000008ea <__mulsi3_helper>:
__mulsi3_helper():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:451
 8ea:	aa 27       	eor	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:452
 8ec:	bb 27       	eor	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:453
 8ee:	08 c0       	rjmp	.+16     	; 0x900 <__mulsi3_helper+0x16>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:457
 8f0:	a2 0f       	add	r26, r18
 8f2:	b3 1f       	adc	r27, r19
 8f4:	e4 1f       	adc	r30, r20
 8f6:	f5 1f       	adc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:460
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	44 1f       	adc	r20, r20
 8fe:	55 1f       	adc	r21, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:463
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:465
 908:	98 f3       	brcs	.-26     	; 0x8f0 <__mulsi3_helper+0x6>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:467
 90a:	70 40       	sbci	r23, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:468
 90c:	a9 f7       	brne	.-22     	; 0x8f8 <__mulsi3_helper+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:469
 90e:	00 97       	sbiw	r24, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:470
 910:	99 f7       	brne	.-26     	; 0x8f8 <__mulsi3_helper+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:473
 912:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:474
 914:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:480
 916:	08 95       	ret

00000918 <__divmodsi4>:
__divmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
 918:	05 2e       	mov	r0, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
 91a:	97 fb       	bst	r25, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
 91c:	16 f4       	brtc	.+4      	; 0x922 <__divmodsi4+0xa>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
 91e:	00 94       	com	r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
 920:	0f d0       	rcall	.+30     	; 0x940 <__negsi2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
 922:	57 fd       	sbrc	r21, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
 924:	05 d0       	rcall	.+10     	; 0x930 <__divmodsi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
 926:	14 d0       	rcall	.+40     	; 0x950 <__udivmodsi4>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
 928:	07 fc       	sbrc	r0, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
 92a:	02 d0       	rcall	.+4      	; 0x930 <__divmodsi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
 92c:	46 f4       	brtc	.+16     	; 0x93e <__divmodsi4_exit>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
 92e:	08 c0       	rjmp	.+16     	; 0x940 <__negsi2>

00000930 <__divmodsi4_neg2>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
 930:	50 95       	com	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
 932:	40 95       	com	r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
 934:	30 95       	com	r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
 936:	21 95       	neg	r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
 938:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
 93a:	4f 4f       	sbci	r20, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
 93c:	5f 4f       	sbci	r21, 0xFF	; 255

0000093e <__divmodsi4_exit>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
 93e:	08 95       	ret

00000940 <__negsi2>:
__negsi2():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
 940:	90 95       	com	r25
 942:	80 95       	com	r24
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
 94e:	08 95       	ret

00000950 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 950:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 952:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 954:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 956:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 958:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 95a:	0d c0       	rjmp	.+26     	; 0x976 <__udivmodsi4_ep>

0000095c <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 95c:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 95e:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 960:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 962:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 964:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 966:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 968:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 96a:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 96c:	20 f0       	brcs	.+8      	; 0x976 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 96e:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 970:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 972:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 974:	f5 0b       	sbc	r31, r21

00000976 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 976:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 978:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 97a:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 97c:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 97e:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 980:	69 f7       	brne	.-38     	; 0x95c <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 982:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 984:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 986:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 988:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 98a:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 98c:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 98e:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 990:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 992:	08 95       	ret

00000994 <__udivmodhi4>:
__udivmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
 994:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
 996:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
 998:	51 e1       	ldi	r21, 0x11	; 17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <__udivmodhi4_ep>

0000099c <__udivmodhi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
 99c:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
 99e:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
 9a0:	a6 17       	cp	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
 9a2:	b7 07       	cpc	r27, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
 9a4:	10 f0       	brcs	.+4      	; 0x9aa <__udivmodhi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
 9a6:	a6 1b       	sub	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
 9a8:	b7 0b       	sbc	r27, r23

000009aa <__udivmodhi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
 9aa:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
 9ac:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
 9ae:	5a 95       	dec	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
 9b0:	a9 f7       	brne	.-22     	; 0x99c <__udivmodhi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
 9b2:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
 9b4:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
 9b6:	bc 01       	movw	r22, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
 9b8:	cd 01       	movw	r24, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
 9ba:	08 95       	ret

000009bc <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 9bc:	f8 94       	cli

000009be <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
